#!/bin/bash

# This script can be used to compile and run the Go server 
# directly in another project.
#
# Run ~/the/path/to/this/script/bin/debug when inside of your project
# and it will start the Go server in your current project. You can then 
# attach with a debugger like Delve. For instance:

# Start the server...
# $ cd my-project
# $ ~/.config/nvim/my-plugins/gitlab/debug/bin
#   Server started on port: 62626
#
# Attach the debugger and set a breakpoint...
# $ SERVER_PID=$(ps aux | grep -E 'gitlab_url' | tail -n 1 | awk '{print $2 }') # Get PID of server
# $ dlv attach $SERVER_PID
# $ (dlv) > break /path/to/source/code/cmd/app/server.go:243
# 
# Curl the server in order to hit the breakpoint...
# $ curl localhost:62626/ping
# $ pong

TARGET=$(pwd)
DEBUG_DIR=$(dirname "$0")
SOURCE_DIR=$(dirname "$DEBUG_DIR")
cd "$SOURCE_DIR/cmd"

go build -gcflags="all=-N -l" -o "${DEBUG_DIR}/bin" && cp "${DEBUG_DIR}/bin" "${TARGET}/bin"

# # Add the token to the debug json
JSON_WITH_TOKEN=$(cat "$DEBUG_DIR/debug.json" | jq --arg token $GITLAB_TOKEN '.auth_token = $token')

# # Run the binary
cd $TARGET
DEBUG=true ./bin "$JSON_WITH_TOKEN"
